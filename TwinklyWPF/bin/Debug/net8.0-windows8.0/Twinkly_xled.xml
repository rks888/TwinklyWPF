<?xml version="1.0"?>
<doc>
    <assembly>
        <name>Twinkly_xled</name>
    </assembly>
    <members>
        <member name="P:Twinkly_xled.TwinklyInstance.Address">
            <summary>
            IP Address of detected Twinkly
            </summary>
        </member>
        <member name="P:Twinkly_xled.TwinklyInstance.Name">
            <summary>
            Name of Detected Twinkly
            </summary>
        </member>
        <member name="T:Twinkly_xled.DataAccess">
            <summary>
            DataAccess Talks directly to the Twinky with UDP or HTTP GET/POST
            </summary>
        </member>
        <member name="P:Twinkly_xled.DataAccess.Error">
            <summary>
            True if there is an error
            </summary>
        </member>
        <member name="P:Twinkly_xled.DataAccess.HttpStatus">
            <summary>
            The Status of the last Http call
            </summary>
        </member>
        <member name="M:Twinkly_xled.DataAccess.RTFX(System.Byte[])">
            <summary>
            Always use V3 Chunked frames
            </summary>
            <param name="frame">Array of all leds * btyes per led</param>        
        </member>
        <member name="M:Twinkly_xled.DataAccess.RTFX_Classic(System.Byte[])">
            <summary>
            use the Original Frame - max 256 lights
            </summary>
        </member>
        <member name="M:Twinkly_xled.DataAccess.Get(System.String)">
            <summary>
            GET - read information from the twinkly API
            </summary>
        </member>
        <member name="M:Twinkly_xled.DataAccess.Post(System.String,System.String)">
            <summary>
            POST - change information on the twinkly device
            </summary>
        </member>
        <member name="T:Twinkly_xled.JSONModels.SummaryResult">
            <summary>
            Summary Result
            </summary>
        </member>
        <member name="M:Twinkly_xled.TwinklyDetector.LocateAsync">
            <summary>
             UDP Scan for the lights - allow multiple sets to be detected
            </summary>
        </member>
        <member name="P:Twinkly_xled.XLedAPI.Status">
            <summary>
            HttpStatus of last call generally
            </summary>
        </member>
        <member name="P:Twinkly_xled.XLedAPI.Uptime">
            <summary>
            How long has the Twinkly been powered on - from the Gestalt
            </summary>
        </member>
        <member name="M:Twinkly_xled.XLedAPI.#ctor">
            <summary>
            Constructor
            </summary>
        </member>
        <member name="M:Twinkly_xled.XLedAPI.Detect">
            <summary>
            Detect all local twinklys, then pick one and pass the Address to ConnectTwinkly
            </summary>
            <returns></returns>
        </member>
        <member name="M:Twinkly_xled.XLedAPI.ConnectTwinkly(System.String)">
            <summary>
            To use most of the API, connect to a Twinkly IP address
            </summary>
            <param name="IP">IPV4 address of Twinkly</param>
            <returns>Status connected=200, or timeout=408</returns>
        </member>
        <member name="M:Twinkly_xled.XLedAPI.Info">
            <summary>
            Info - aka Gestalt - Bytes Per LED and the RT Buffer are set by calling 
            </summary>
            <returns>GestaltResult</returns>
        </member>
        <member name="M:Twinkly_xled.XLedAPI.GetStatus">
            <summary>
            Expect code=1000 for OK
            </summary>
        </member>
        <member name="M:Twinkly_xled.XLedAPI.Firmware">
            <summary>
            Firmware Version as string
            </summary>
        </member>
        <member name="M:Twinkly_xled.XLedAPI.SetOperationMode(Twinkly_xled.JSONModels.LedModes)">
            <summary>
             Use this to Turn on or Turn off the lights "movie" or "off" 
             Also used to set "rt" mode so UDP 7777 will respond - rt stops animation from movie
             Single color mode
            </summary>
        </member>
        <member name="M:Twinkly_xled.XLedAPI.SetHue(System.Drawing.Color)">
            <summary>
            POST a single colour for all lights
            </summary>
            <param name="c">System.Drawing.Color</param>
            <returns>Api Code 1000=success</returns>
        </member>
        <member name="M:Twinkly_xled.XLedAPI.SetColorHSV(System.Int32,System.Int32,System.Int32)">
            <summary>
            HSV color
            </summary>
        </member>
        <member name="M:Twinkly_xled.XLedAPI.SetCurrentEffects(System.Int32)">
            <summary>
            Sets Effect mode and then an effect
            </summary>
            <param name="effect">0 based don't pass more than 15</param>
            <returns></returns>
        </member>
        <member name="M:Twinkly_xled.XLedAPI.GetMovies">
            <summary>
            Get list of movies - Retrieve the identities and parameters of all uploaded movies.
            </summary>
        </member>
        <member name="M:Twinkly_xled.XLedAPI.SetSaturationRel(System.Int32)">
            <summary>
            -100 to 100 relative saturaton
            </summary>
            <param name="saturation">Relative Saturation</param>
            <returns>code</returns>
        </member>
        <member name="M:Twinkly_xled.XLedAPI.SetMQTTConfig(Twinkly_xled.JSONModels.MQTTConfigSet)">
            <summary>
            SetMQTTConfig - You can set the host and user but can it actually connect to an MQTT broker?  
            </summary>
            <param name="settings">Host ClientId KeepAlive User</param>
            <returns>VerifyResult always 1000?</returns>
        </member>
        <member name="M:Twinkly_xled.XLedAPI.GetPlaylistCurrent">
            <summary>
            Gets which movie is currently played in playlist mode.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Twinkly_xled.XLedAPI.SingleColorRT(System.Byte[])">
            <summary>
            Use the RT Buffer to send one RealTime Frame of a single color
            </summary>
            <param name="c">array of 3 or 4 bytes to math BytesPerLed</param>
            <returns></returns>
        </member>
        <member name="M:Twinkly_xled.XLedAPI.SendRtFrame(System.Byte[])">
            <summary>
            RT Mode - using V3 Frames to support more than 256 lights
            </summary>
            <param name="frame"></param>
            <returns></returns>
        </member>
        <member name="M:Twinkly_xled.XLedAPI.SingleColorRT(System.Drawing.Color)">
            <summary>
            Pass Color, but not the WPF one 
            </summary>
            <param name="c">System Drawing Color</param>
        </member>
    </members>
</doc>
